# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '4fd4c33e-2e9e-4cb1-8b3a-7894c610d465'
  imageRepository: 'nodejstestapplication'
  containerRegistry: 'registry2111.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Application/Dockerfile'
  tag1: '$(Build.BuildId)'
  tag2: 'latest'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Scan
  displayName: Scanning
  jobs:
      
  - job: Scan
    displayName: Scan
    pool:
      # vmImage: ubuntu-latest
      name: Default
      demands: myCustomCapability
      # - agent.name -equals SonarQube
    steps:
    - task: dependency-check-build-task@6
      inputs:
        projectName: '1-projecr'
        scanPath: '$(Build.SourcesDirectory)/Application'
        format: 'HTML, JSON'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: '/home/rinshad/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=project-1_project-1_AY6jlnqo7N3U2fXEsoOm -Dsonar.sources=$(Build.SourcesDirectory)/Application/ -Dsonar.host.url=http://20.127.168.190:9000 -Dsonar.token=sqp_accb5956ce919e4139e9cd4543a7fc035330e94c'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo $(Build.BuildId)' 

- stage: Build
  displayName: Build and push stage
  jobs:
      
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest

    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag1)
          $(tag2)
